# (generated with --quick)

from typing import Any, List, MutableMapping, MutableSequence, Sequence, Set, Type, TypeVar, Union

DictDB = MutableMapping[str, MutableMapping[str, str]]
Index = MutableMapping[str, str]
ListDB = MutableSequence[MutableMapping[str, str]]
StringMap = MutableMapping[str, str]

FieldsDescription: Type[Union[str, Sequence[str]]]
REPORT_TEMPLATE_KEY_ADDED: str
REPORT_TEMPLATE_MERGE_WARNING: str
REPORT_TEMPLATE_RECORDS_WITHOUT_DASH: str
REPORT_TEMPLATE_RECORDS_WITHOUT_FIELDS: str
REPORT_TEMPLATE_THERE_IS_FIELD: str
SimpleDB: Type[Union[MutableMapping[str, MutableMapping[str, str]], MutableSequence[MutableMapping[str, str]]]]
SplitPolicies: Any
logger: logging.Logger
logging: module

_T = TypeVar('_T')

def add_base_country(db: Union[MutableMapping[str, MutableMapping[str, str]], MutableSequence[MutableMapping[str, str]]], source_field: str, dest_field: str) -> None: ...
def chain_indexes(*indexes: Union[List[MutableMapping[str, str]], MutableMapping[str, str]]) -> MutableMapping[str, str]: ...
def copy(x: _T) -> _T: ...
def create_dict_db(db: MutableSequence[MutableMapping[str, str]], field_name: str, allow_doubles: bool = ...) -> MutableMapping[str, MutableMapping[str, str]]: ...
def create_index(db: Union[MutableMapping[str, MutableMapping[str, str]], MutableSequence[MutableMapping[str, str]]], first_field: str, second_fields: Union[str, Sequence[str]], policy = ..., remove_doubles: bool = ...) -> MutableMapping[str, str]: ...
def get_keys(db: Union[MutableMapping[str, MutableMapping[str, str]], MutableSequence[MutableMapping[str, str]]]) -> Set[str]: ...
def merge_indexes(*indexes: Union[List[MutableMapping[str, str]], MutableMapping[str, str]]) -> MutableMapping[str, str]: ...
def normalize_keys(db: MutableSequence[MutableMapping[str, str]], key_mapping: MutableMapping[str, str]) -> MutableSequence[MutableMapping[str, str]]: ...
def print_index(index: MutableMapping[str, str]) -> None: ...
def print_names_with_comma(index: MutableMapping[str, str], policy = ...) -> None: ...
def reorder_name(name: str) -> str: ...
def reverse_index(index: MutableMapping[str, str]) -> MutableMapping[str, str]: ...
